const _nativeEVM = {
    add:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    sub:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    mul:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    div:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    sdiv:         { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    mod:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    smod:         { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    exp:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    not:          { mutable: false, arity: 1, inputs: [{type: 'uint', name: 'a'}], outputs: [{type: 'uint', name: 'c'}] },
    lt:           { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    gt:           { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    slt:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    sgt:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    eq:           { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    iszero:       { mutable: false, arity: 1, inputs: [{type: 'uint', name: 'a'}], outputs: [{type: 'bool', name: 'c'}] },
    and:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    or:           { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    xor:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    byte:         { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    shl:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    shr:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    sar:          { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    addmod:       { mutable: false, arity: 3, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}, {type: 'uint', name: 'c'}], outputs: [{type: 'uint', name: 'd'}] },
    mulmod:       { mutable: false, arity: 3, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}, {type: 'uint', name: 'c'}], outputs: [{type: 'uint', name: 'd'}] },
    signextend:   { mutable: false, arity: 2, inputs: [{type: 'uint', name: 'a'}, {type: 'uint', name: 'b'}], outputs: [{type: 'uint', name: 'c'}] },
    gas:          {mutable: false, arity: 0, inputs: [], outputs: [] },
    address:      {mutable: false, arity: 0, inputs: [], outputs: [] },
    balance:      {mutable: false, arity: 1, inputs: [{type: 'address', name: 'address'}], outputs: [] },
    caller:       {mutable: false, arity: 0, inputs: [], outputs: [] },
    callvalue:    {mutable: false, arity: 0, inputs: [], outputs: [] },
    calldataload: {mutable: false, arity: 1, inputs: [], outputs: [] },
    calldatasize: {mutable: false, arity: 0, inputs: [], outputs: [] },
    codesize:     {mutable: false, arity: 0, inputs: [], outputs: [] },
    extcodesize:  {mutable: false, arity: 1, inputs: [{type: 'address', name: 'address'}], outputs: [] },
    returndatasize:{mutable: false, arity: 0, inputs: [], outputs: [] },
    extcodehash:  {mutable: false, arity: 1, inputs: [{type: 'address', name: 'address'}], outputs: [] },
    chainid:      {mutable: false, arity: 0, inputs: [], outputs: [] },
    origin:       {mutable: false, arity: 0, inputs: [], outputs: [] },
    gasprice:     {mutable: false, arity: 0, inputs: [], outputs: [] },
    blockhash:    {mutable: false, arity: 1, inputs: [], outputs: [] },
    coinbase:     {mutable: false, arity: 0, inputs: [], outputs: [] },
    timestamp:    {mutable: false, arity: 0, inputs: [], outputs: [] },
    number:       {mutable: false, arity: 0, inputs: [], outputs: [] },
    difficulty:   {mutable: false, arity: 0, inputs: [], outputs: [] },
    gaslimit:     {mutable: false, arity: 0, inputs: [], outputs: [] },
    // pc:           {mutable: false, arity: 0, inputs: [], outputs: [] }, outdated
    pop:          {mutable: false, arity: 1, inputs: [], outputs: [] },
    msize:        {mutable: false, arity: 0, inputs: [], outputs: [] },
    mload:        {mutable: false, arity: 1, inputs: [], outputs: [] },
    sload:        {mutable: false, arity: 1, inputs: [], outputs: [] },
    
    'call!_':      { mutable: true, arity: 3 },
    'callcode!_':  { mutable: true, arity: 3 },
    'delegatecall!_':{ mutable: true, arity: 2 },
    call_:         { mutable: false, arity: 2 },
    create:       {mutable: false, arity: 2, inputs: [], outputs: [] },
    create2:      {mutable: false, arity: 3, inputs: [], outputs: [] },
    log:          {mutable: false, arity: null, inputs: [], outputs: [] },
    keccak256:    { mutable: false, arity: 1, inputs: [] },
    
    'store!':     {mutable: false, arity: 2, inputs: [], outputs: [] },
    mstore_:       {mutable: false, arity: 1, inputs: [], outputs: [] },
    mstore8_:      {mutable: false, arity: 1, inputs: [], outputs: [] },
    
    calldatacopy_: {mutable: false, arity: 2, inputs: [], outputs: [] },
    codecopy_:    {mutable: false, arity: 2, inputs: [], outputs: [] },
    extcodecopy_: {mutable: false, arity: 3, inputs: [], outputs: [] },
    returndatacopy_:{mutable: false, arity: 2, inputs: [], outputs: [] },

    'revert#':       {mutable: false, arity: 1 },
    'return#':       {mutable: false, arity: 1 },
    'selfdestruct!#': {mutable: true, arity: 1 },
    'invalid#':      {mutable: false, arity: 0 },
    'stop#':         {mutable: false, arity: 0, inputs: [], outputs: [] },
}

const docs = {
    add:          { docs: 'x + y' },
    sub:          { docs: 'x - y' },
    mul:          { docs: 'x * y' },
    div:          { docs: 'x / y or 0 if y == 0' },
    sdiv:         { docs: 'x / y, for signed numbers in two’s complement, 0 if y == 0' },
    mod:          { docs: 'x % y, 0 if y == 0' },
    smod:         { docs: 'x % y, for signed numbers in two’s complement, 0 if y == 0' },
    exp:          { docs: 'x to the power of y' },
    not:          { docs: 'bitwise “not” of x (every bit of x is negated)' },
    lt:           { docs: '1 if x < y, 0 otherwise' },
    gt:           { docs: '1 if x > y, 0 otherwise' },
    slt:          { docs: '1 if x < y, 0 otherwise, for signed numbers in two’s complement' },
    sgt:          { docs: '1 if x > y, 0 otherwise, for signed numbers in two’s complement' },
    eq:           { docs: '' },
    iszero:       { docs: '' },
    and:          { docs: '' },
    or:           { docs: '' },
    xor:          { docs: '' },
    byte:         { docs: '' },
    shl:          { docs: '' },
    shr:          { docs: '' },
    sar:          { docs: '' },
    addmod:       { docs: '' },
    mulmod:       { docs: '' },
    signextend:   { docs: '' },
    keccak256:    { docs: '' },
    'call!':      { docs: '' },
    'callcode!':  { docs: '' },
    'delegatecall!': { docs: '' },
    call:         { docs: '' },

}

const nativeEVM = {};
Object.keys(_nativeEVM).forEach(name => {
    let nname = name;
    if (nname.slice(-1) !== '#') nname += '_';
    nativeEVM[nname] = Object.assign(_nativeEVM[name], docs[name] || {});
})

module.exports = nativeEVM;
