{"version":3,"sources":["utils/config.js","components/Out.js","utils/web3.js","utils/taylor.js","components/MalTayContract.js","views/TaylorEditor.js","App.js","serviceWorker.js","index.js"],"names":["editorOpts","selectOnLineNumbers","minimap","enabled","wordWrap","wordWrapColumn","fontSize","Out","props","styles","result","errors","ScrollView","horizontal","scrollEnabled","scrollEventThrottle","nestedScrollEnabled","contentContainerStyle","width","style","flex","color","src","name","theme","collapsed","shouldCollapse","field","getWeb3","a","window","ethereum","web3Instance","Web3","enable","console","log","web3","currentProvider","getProvider","provider","ethers","providers","Web3Provider","signer","getSigner","DEFAULT_DEPLOYMENT","5777","contract1","root","3","addressKey","chainid","STORAGE_KEY_TAYLOR_ADDRESS","addAddress","address","key","addresses","getAddresses","localStorage","setItem","JSON","stringify","getItem","parse","call","data","transaction","to","sendTransaction","gasLimit","value","gasPrice","response","MalTayContract","state","rootAddress","rootFunctions","addrToBeRegistered","registered","onChangeAddress","bind","onChangeCurrentName","onAddressSave","onChangeRootAddress","onChangeRegisteredAddress","onRegister","setWeb3","getNetwork","chainId","this","setState","_taycall","_taysend","setContract","setRegistered","taycall","taysend","onRootChange","count","parseInt","i","expr","maltay","expr2h","raddr","substring","newval","Object","keys","find","placeholder","label","onChangeText","small","light","onClick","picker","mode","backgroundColor","selectedValue","onValueChange","Item","map","paddingTop","Component","TaylorEditor","code","source","taylorUtils","encoded","getWindowDimensions","pageNumber","autocompile","onContentSizeChange","onTextChange","execute","encdata","force","includes","decode","e","receipt","wait","status","Error","wdims","Dimensions","get","rootDims","document","getElementById","getBoundingClientRect","height","editor","monaco","focus","noOfPages","minWidth","minHeight","getPageSize","editorStyles","consoleStyles","panelStyles","pagingEnabled","language","options","onChange","editorDidMount","position","top","left","opacity","type","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42a3af8c.chunk.js","sourcesContent":["const editorOpts = {\n  selectOnLineNumbers: true,\n  minimap: {enabled: false},\n  wordWrap: 'on',\n  wordWrapColumn: 80,\n  fontSize: 14,\n}\n\nexport {\n  editorOpts,\n}\n","import React from 'react';\nimport { ScrollView } from 'react-native';\nimport { Text } from 'native-base';\nimport ReactJson from 'custom-react-json-view'\nimport { editorOpts } from '../utils/config.js';\n\nfunction Out(props) {\n    const {styles, result, errors} = props;\n    const fontSize = editorOpts.fontSize;\n\n    return (\n    <ScrollView\n        horizontal={false}\n        scrollEnabled={true}\n        scrollEventThrottle={100}\n        nestedScrollEnabled={true}\n        contentContainerStyle={{width: styles.width}}\n        style={{ ...styles, flex: 1 }}\n    >\n        <ScrollView\n        horizontal={true}\n        scrollEnabled={true}\n        scrollEventThrottle={100}\n        contentContainerStyle={{width: styles.width}}\n        style={{ ...styles, flex: 1 }}\n        >\n        {errors\n            ? <Text style={{color: 'firebrick', fontSize }}>{errors}</Text>\n            : <ReactJson\n            src={result}\n            name=\"result\"\n            theme=\"twilight\"\n            collapsed={6}\n            shouldCollapse={field => field.name === 'd' }\n            style={{ fontSize }}\n            />\n        }\n        </ScrollView>\n    </ScrollView>\n    );\n}\n\nexport default Out;\n","import { ethers } from 'ethers';\n\nconst getWeb3 = async () => {\n    let web3Instance;\n    if (window.ethereum) {\n        // eslint-disable-next-line\n        web3Instance = new Web3(ethereum);\n        try {\n            // eslint-disable-next-line\n            await ethereum.enable();\n        } catch (error) {\n            console.log('User rejected dApp connection');\n        }\n    }\n\n    if (!web3Instance && window.web3) {\n        // eslint-disable-next-line\n        web3Instance = new Web3(web3.currentProvider);\n    }\n\n    if (!web3Instance) {\n        console.log('Non-Ethereum browser detected. Consider trying MetaMask!');\n        return null;\n    }\n    return web3Instance;\n};\n\nconst getProvider = async () => {\n  const web3 = await getWeb3();\n  const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n  const signer = provider.getSigner(0);\n  return { provider, signer };\n}\n\nexport {\n  getWeb3,\n  getProvider,\n}\n","const DEFAULT_CODE = '(add (mul 2 (add 13 56)) 9000)';\nconst STORAGE_KEY_CODE = 'TaylorCode';\nconst STORAGE_KEY_TAYLOR_ADDRESS = 'TaylorInterpreterAddress';\n\nconst DEFAULT_DEPLOYMENT = {\n  5777: {\n    contract1: '0xCFF8dc8A5e2Af7fcc6BE124d3C91FA50186A8c96',\n    root: 'contract1'\n  },\n  3: {\n    contract1: '0x7D4150f492f93e2eDD7FC0Fc62c9193b322f75e5',\n    root: 'contract1',\n  },\n}\n\nconst storeCode = source => {\n  window.localStorage.setItem(STORAGE_KEY_CODE, source);\n}\n\nconst getCode = () => {\n  let source = window.localStorage.getItem(STORAGE_KEY_CODE);\n  if (!source) {\n    source = DEFAULT_CODE;\n    window.localStorage.setItem(STORAGE_KEY_CODE, source);\n  }\n  return source;\n}\n\nconst addressKey = chainid => STORAGE_KEY_TAYLOR_ADDRESS + '_' + chainid;\n\nconst addAddress = (chainid, address, name) => {\n  const key = addressKey(chainid);\n  const addresses = getAddresses(chainid);\n  addresses[name] = address;\n  addresses.root = name;\n  localStorage.setItem(key, JSON.stringify(addresses));\n}\n\nconst getAddresses = (chainid) => {\n  const key = addressKey(chainid);\n  let addresses = localStorage.getItem(key);\n  if (addresses) {\n    addresses = JSON.parse(addresses);\n  } else {\n    addresses = DEFAULT_DEPLOYMENT[chainid] || {};\n    localStorage.setItem(key, JSON.stringify(addresses));\n  }\n  return addresses;\n}\n\nconst getNamedAddress = (chainid, name) => {\n  const addresses = getAddresses(chainid);\n  return addresses[name];\n}\n\nconst clearAddresses = (chainid) => {\n  const key = addressKey(chainid);\n  localStorage.setItem(key, '{}');\n}\n\nexport {\n  storeCode,\n  getCode,\n  addAddress,\n  getAddresses,\n  getNamedAddress,\n  clearAddresses,\n}\n","import React, { Component } from 'react';\nimport { View, Item, Input, Text, Button, Icon, Picker } from 'native-base';\nimport { getProvider } from '../utils/web3.js';\nimport { addAddress, getAddresses } from '../utils/taylor.js';\nimport maltay from 'taylor/maltay/maltay.js';\n\nconst call = provider => address => async data => {\n  let transaction = {\n    to: address,\n    data\n  }\n  return await provider.call(transaction);\n}\n\nconst sendTransaction = signer => address => async data => {\n  const transaction = {\n    data,\n    gasLimit: 1000000,\n    value: 0,\n    to: address,\n    gasPrice: 21,\n  };\n  const response = await signer.sendTransaction(transaction);\n  return response;\n}\n\n\nclass MalTayContract extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      provider: null,\n      signer: null,\n      rootAddress: {},\n      addresses: {},\n      rootFunctions: [],\n      addrToBeRegistered: null,\n      registered: {},\n    }\n\n    this.onChangeAddress = this.onChangeAddress.bind(this);\n    this.onChangeCurrentName = this.onChangeCurrentName.bind(this);\n    this.onAddressSave = this.onAddressSave.bind(this);\n    this.onChangeRootAddress = this.onChangeRootAddress.bind(this);\n    this.onChangeRegisteredAddress = this.onChangeRegisteredAddress.bind(this);\n    this.onRegister = this.onRegister.bind(this);\n  \n    this.setWeb3();\n  }\n\n  async setWeb3() {\n    const { provider, signer } = await getProvider();\n    const chainid = (await provider.getNetwork()).chainId;\n    const addresses = getAddresses(chainid);\n    const rootAddress = {name: addresses.root, address: addresses[addresses.root]};\n    this.setState({ addresses, rootAddress, provider, signer });\n    \n    this._taycall = call(provider);\n    this._taysend = sendTransaction(signer);\n    this.setContract(rootAddress.address);\n    this.setRegistered(rootAddress.address);\n  }\n\n  setContract(address) {\n    address = address || this.state.rootAddress;\n    if(!address) {\n        this.taycall = null;\n        this.taysend = null\n    } else {\n      this.taycall = this._taycall(address);\n      this.taysend = this._taysend(address);\n      this.props.onRootChange(this.taycall, this.taysend);\n    }\n  }\n\n  async setRegistered(address) {\n    address = address || this.state.rootAddress.address;\n    if (!address) return;\n\n    let count = await this.taycall('0x44444440');\n    count = parseInt(count, 16);\n    let registered = {};\n\n    for (let i = 1; i <= count; i++) {\n      const expr = maltay.expr2h('(getregistered ' + i + ')');\n      let raddr = await this.props.taycall(expr);\n      raddr = '0x' + raddr.substring(10);\n      registered[raddr] = raddr;\n    }\n    this.setState({ registered });\n  }\n\n  // async setFunctions(address) {\n  //   address = address || this.state.rootAddress.address;\n  //   if (!address) return;\n\n  //   let rootFunctions = [];\n    \n  //   let count = await this.taycall('0x44444441');\n  //   console.log('count', count);\n  //   // count = parseInt(count, 16);\n  //   // let registered = {};\n\n  //   // for (let i = 1; i <= count; i++) {\n  //   //   const expr = maltay.expr2h('(getregistered ' + i + ')');\n  //   //   let raddr = await this.props.taycall(expr);\n  //   //   raddr = '0x' + raddr.substring(10);\n  //   //   registered[raddr] = raddr;\n  //   // }\n\n  //   // this.setState({ rootFunctions });\n  // }\n\n  async onChangeAddress(address) {\n    const { rootAddress } = this.state;\n    rootAddress.address = address;\n    this.setState({ rootAddress });\n  }\n\n  onChangeCurrentName(name) {\n    const { rootAddress } = this.state;\n    rootAddress.name = name;\n    this.setState({ rootAddress });\n  }\n\n  async onAddressSave() {\n    const { rootAddress } = this.state;\n    const { provider  } = this.state;\n    const chainid = (await provider.getNetwork()).chainId;\n\n    addAddress(chainid, rootAddress.address, rootAddress.name);\n    this.setContract(rootAddress.address);\n    this.setRegistered(rootAddress);\n  }\n\n  onChangeRootAddress(newval) {\n    const { addresses } = this.state;\n    const name = Object.keys(addresses).find(name => addresses[name] === newval);\n    const rootAddress = { name, address: newval};\n    this.setState({ rootAddress });\n    this.setContract(rootAddress.address);\n    this.setRegistered(newval);\n  }\n\n  onChangeRegisteredAddress(newval) {\n    this.setState({ addrToBeRegistered: newval });\n  }\n\n  async onRegister() {\n    const { addrToBeRegistered } = this.state;\n    \n    const expr = maltay.expr2h('(register! 0x\"' + addrToBeRegistered.substring(2) + '\")');\n    await this.taysend(expr);\n\n    // TODO check receipt for success;\n    this.setRegistered();\n  }\n\n  render() {\n    const {styles} = this.props;\n    const { rootAddress, addresses, registered } = this.state;\n\n    return (\n      <View style={{ ...styles, fontSize: 18}}>\n        <View style={{ ...styles, flex: 1 }}>\n          <Item style={{ width: styles.width }}>\n            <Input\n              style={{ color: 'white' }}\n              placeholder='address'\n              label='address'\n              onChangeText={this.onChangeAddress}\n            />\n          </Item>\n          <Item style={{ width: styles.width }}>\n            <Input\n              style={{ color: 'white' }}\n              placeholder='name'\n              label='name'\n              onChangeText={this.onChangeCurrentName}\n            />\n          </Item>\n          <Button small light onClick={this.onAddressSave}>\n            <Icon name='save' />\n          </Button>\n        </View>\n        <View style={{ ...styles, flex: 1 }}>\n          <Item picker>\n            <Picker\n              mode=\"dropdown\"\n              style={{ width: styles.width, backgroundColor: 'rgb(169, 169, 169)' }}\n              selectedValue={this.state.rootAddress.name}\n              onValueChange={this.onChangeRootAddress}\n            >\n              <Picker.Item label=\"select root\" value={''} />\n              {\n                Object.keys(addresses).map(name => {\n                  return <Picker.Item label={name} value={addresses[name]} key={name}/>\n                })\n              }\n            </Picker>\n          </Item>\n          <View style={{ width: styles.width, flex: 1, paddingTop: 10 }}>\n            <Text style={{ color: 'beige', fontSize: 18 }}>Root Contract</Text>\n            <br></br>\n            <Text style={{ color: 'beige', fontSize: 18 }}>{ rootAddress.name || '-' } - { rootAddress.address || '-' }</Text>\n          </View>\n          <Item picker>\n            <Picker\n              mode=\"dropdown\"\n              style={{ width: styles.width, backgroundColor: 'rgb(169, 169, 169)' }}\n              selectedValue={this.state.rootAddress.name}\n              onValueChange={this.onChangeRootAddress}\n            >\n              <Picker.Item label=\"select registered contract\" value={''} />\n              {\n                Object.keys(registered).map(name => {\n                  return <Picker.Item label={name} value={addresses[name]} key={name}/>\n                })\n              }\n            </Picker>\n          </Item>\n          <Item style={{ width: styles.width }}>\n            <Input\n              style={{ color: 'white' }}\n              placeholder='address'\n              label='address'\n              onChangeText={this.onChangeRegisteredAddress}\n            />\n          </Item>\n          <Button small light onClick={this.onRegister}>\n            <Text>register</Text>\n          </Button>\n          <View>\n              <Text></Text>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default MalTayContract;\n","import React, { Component } from 'react';\nimport { Dimensions, ScrollView } from 'react-native';\nimport { View, Button, Icon } from 'native-base';\nimport MonacoEditor from 'react-monaco-editor';\nimport { editorOpts } from '../utils/config.js';\nimport Out from '../components/Out.js';\nimport { getProvider } from '../utils/web3.js';\nimport MalTayContract from '../components/MalTayContract.js';\nimport * as taylorUtils from '../utils/taylor.js';\nimport maltay from 'taylor/maltay/maltay.js';\n\n\nconst MIN_WIDTH = 800;\n\nfunction getPageSize(noOfPages, {width, height}) {\n  if (width < MIN_WIDTH) return {minWidth: width, minHeight: height};\n\n  return {width: width / noOfPages, height};\n}\n\nclass TaylorEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    const code =  taylorUtils.getCode();\n    const encoded = maltay.expr2h(code);\n\n    this.state = {\n      ...this.getWindowDimensions(),\n      pageNumber: 3,\n      autocompile: true,\n      code,\n      encoded,\n      result: [{data: encoded}],\n      errors: '',\n      provider: null,\n      signer: null,\n      rootAddress: null,\n      taycall: null,\n      taysend: null,\n    }\n\n    this.onContentSizeChange = this.onContentSizeChange.bind(this);\n    this.getWindowDimensions = this.getWindowDimensions.bind(this);\n    this.onTextChange = this.onTextChange.bind(this);\n    this.execute = this.execute.bind(this);\n    this.onRootChange = this.onRootChange.bind(this);\n\n    this.setWeb3();\n  }\n\n  async setWeb3() {\n    const { provider, signer } = await getProvider();\n    this.setState({ provider, signer });\n    this.onRootChange();\n  }\n\n  onRootChange(taycall, taysend) {\n    this.setState({\n        taycall,\n        taysend,\n    });\n    this.execute();\n  }\n\n  async execute({encdata, code, force=false}={}) {\n      encdata = encdata || this.state.encoded;\n      code = code || this.state.code;\n      const isTransaction = code && code.includes(\"def!\");\n      if (!isTransaction) {\n        let encoded;\n        try {\n            encoded = await this.state.taycall(encdata);\n        } catch (e) {}\n        let result;\n        try {\n            result = maltay.decode(encoded);\n        } catch(e) {}\n        this.setState({ result: [{ result, encoded, data: encdata }] });\n      } else if (force) {\n          let response, receipt = {};\n          try {\n            response = await this.state.taysend(encdata);\n            this.setState({ result: [{ receipt: response }] });\n            receipt = await response.wait();\n          } catch (e) {}\n        \n        if (receipt.status === 0) {\n            throw new Error('Transaction failed');\n        }\n        this.setState({ result: [{ receipt }] });\n\n      }\n  }\n\n  onContentSizeChange() {\n    this.setState(this.getWindowDimensions());\n  }\n\n  getWindowDimensions() {\n    let wdims = Dimensions.get('window');\n    let rootDims = document.getElementById('TaylorRoot').getBoundingClientRect();\n\n    const dims = {\n      width: wdims.width || rootDims.width,\n      height: wdims.height || rootDims.height,\n    }\n    return dims;\n  }\n\n  editorDidMount(editor, monaco) {\n    editor.focus();\n  }\n\n  onTextChange(code) {\n      try {\n        const encoded = maltay.expr2h(code);\n        this.setState({ code });\n        taylorUtils.storeCode(code);\n        this.execute({encdata: encoded, code});\n      } catch(e) {}\n  }\n\n  render() {\n    let {\n      width,\n      height,\n    } = this.state;\n    const styles = getPageSize(this.state.pageNumber, { width, height });\n\n    const editorStyles = { ...styles, width: styles.width * 2, height: styles.height * 2 / 5 }\n    const consoleStyles = { ...styles, width: styles.width * 2, height: styles.height - editorStyles.height }\n    const panelStyles = { ...styles }\n\n    const {code, result, errors, taycall, taysend} = this.state;\n\n    return (\n        <ScrollView\n            horizontal={true}\n            pagingEnabled={true}\n            scrollEnabled={true}\n            scrollEventThrottle={100}\n            nestedScrollEnabled={true}\n            contentContainerStyle={{width: \"100%\"}}\n            onContentSizeChange={this.onContentSizeChange}\n        >\n            <View style={{ ...editorStyles, flex: 1}}>\n                <MonacoEditor\n                    width={editorStyles.width}\n                    height={editorStyles.height}\n                    language=\"javascript\"\n                    theme=\"vs-dark\"\n                    value={code}\n                    options={editorOpts}\n                    onChange={this.onTextChange}\n                    editorDidMount={this.editorDidMount}\n                />\n                <Out \n                    result={result}\n                    errors={errors}\n                    styles={{ ...consoleStyles }}\n                />\n            </View>\n            <Button\n                small\n                light\n                style={{ position: 'fixed', top: '0px', left: '0px', backgroundColor: 'white',  opacity: this.state.autocompile ? 0.5 : 0.2 }}\n                onClick={() => this.execute({force: true})}\n            >\n                <Icon type=\"FontAwesome\" name='play' />\n            </Button>\n            <MalTayContract\n                taycall={taycall}\n                taysend={taysend}\n                styles={{...panelStyles}}\n                onRootChange={this.onRootChange}\n            />\n        </ScrollView>\n    );\n  }\n}\n\nexport default TaylorEditor;\n","import React from 'react';\nimport './App.css';\nimport TaylorEditor from './views/TaylorEditor.js';\n\nfunction App (props) {\n  return (<TaylorEditor />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('TaylorRoot')\n// );\n\nReactDOM.render(<App />, document.getElementById('TaylorRoot'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}